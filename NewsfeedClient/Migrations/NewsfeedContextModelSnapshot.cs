// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NewsfeedClient.DAL;
using System;

namespace NewsfeedClient.Migrations
{
    [DbContext(typeof(NewsfeedContext))]
    partial class NewsfeedContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NewsfeedClient.Models.Digest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatorId");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Digests");
                });

            modelBuilder.Entity("NewsfeedClient.Models.DigestSource", b =>
                {
                    b.Property<int>("DigestId");

                    b.Property<int>("SourceId");

                    b.HasKey("DigestId", "SourceId");

                    b.HasIndex("SourceId");

                    b.ToTable("DigestSources");
                });

            modelBuilder.Entity("NewsfeedClient.Models.Friendship", b =>
                {
                    b.Property<int>("Friend1Id");

                    b.Property<int>("Friend2Id");

                    b.HasKey("Friend1Id", "Friend2Id");

                    b.HasIndex("Friend2Id");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("NewsfeedClient.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("SourceId");

                    b.Property<DateTime>("TimePosted");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("NewsfeedClient.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Service");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("NewsfeedClient.Models.Subscription", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("DigestId");

                    b.HasKey("UserId", "DigestId");

                    b.HasIndex("DigestId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("NewsfeedClient.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarFilename");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NewsfeedClient.Models.Digest", b =>
                {
                    b.HasOne("NewsfeedClient.Models.User", "Creator")
                        .WithMany("Digests")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NewsfeedClient.Models.DigestSource", b =>
                {
                    b.HasOne("NewsfeedClient.Models.Digest", "Digest")
                        .WithMany("DigestSources")
                        .HasForeignKey("DigestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NewsfeedClient.Models.Source", "Source")
                        .WithMany("DigestSources")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NewsfeedClient.Models.Friendship", b =>
                {
                    b.HasOne("NewsfeedClient.Models.User", "Friend1")
                        .WithMany("Friendships")
                        .HasForeignKey("Friend1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NewsfeedClient.Models.User", "Friend2")
                        .WithMany()
                        .HasForeignKey("Friend2Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NewsfeedClient.Models.Post", b =>
                {
                    b.HasOne("NewsfeedClient.Models.Source", "Source")
                        .WithMany("Posts")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NewsfeedClient.Models.Subscription", b =>
                {
                    b.HasOne("NewsfeedClient.Models.Digest", "Digest")
                        .WithMany("Subscribers")
                        .HasForeignKey("DigestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NewsfeedClient.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
